
///////////////////////////////////////////////////
//Служебные функции и процедуры
///////////////////////////////////////////////////

&НаКлиенте
// контекст фреймворка Vanessa-Automation
Перем Ванесса;
 
&НаКлиенте
// Структура, в которой хранится состояние сценария между выполнением шагов. Очищается перед выполнением каждого сценария.
Перем Контекст Экспорт;
 
&НаКлиенте
// Структура, в которой можно хранить служебные данные между запусками сценариев. Существует, пока открыта форма Vanessa-Automation.
Перем КонтекстСохраняемый Экспорт;

&НаКлиенте
// Функция экспортирует список шагов, которые реализованы в данной внешней обработке.
Функция ПолучитьСписокТестов(КонтекстФреймворкаBDD) Экспорт
	Ванесса = КонтекстФреймворкаBDD;
	
	ВсеТесты = Новый Массив;

	//описание параметров
	//Ванесса.ДобавитьШагВМассивТестов(ВсеТесты,Снипет,ИмяПроцедуры,ПредставлениеТеста,ОписаниеШага,ТипШага,Транзакция,Параметр);

	Ванесса.ДобавитьШагВМассивТестов(ВсеТесты,"ЯОчищаюРегистрСообщенийЛогирования()","ЯОчищаюРегистрСообщенийЛогирования","И я очищаю регистр сообщений логирования","","");
	Ванесса.ДобавитьШагВМассивТестов(ВсеТесты,"ЯВывожуЛогСУровнемЛогированияПредупреждениеСообщениеВЛогСИменем(Парам01,Парам02)","ЯВывожуЛогСУровнемЛогированияПредупреждениеСообщениеВЛогСИменем","и я вывожу лог с уровнем логирования Предупреждение сообщение ""Предупреждение Лог, который смог"" в лог с именем """"","","");
	Ванесса.ДобавитьШагВМассивТестов(ВсеТесты,"ЯВывожуЛогСУровнемЛогированияОшибкаСообщениеВЛогСИменем(Парам01,Парам02)","ЯВывожуЛогСУровнемЛогированияОшибкаСообщениеВЛогСИменем","и я вывожу лог с уровнем логирования Ошибка сообщение ""Ошибка Лог, который смог"" в лог с именем """"","","");
	Ванесса.ДобавитьШагВМассивТестов(ВсеТесты,"ЯВывожуЛогСУровнемЛогированияКритическаяОшибкаСообщениеВЛогСИменем(Парам01,Парам02)","ЯВывожуЛогСУровнемЛогированияКритическаяОшибкаСообщениеВЛогСИменем","и я вывожу лог с уровнем логирования КритическаяОшибка сообщение ""КритическаяОшибка Лог, который смог"" в лог с именем """"","","");
	Ванесса.ДобавитьШагВМассивТестов(ВсеТесты,"ЯУстанавливаюУровеньОтладкиДляЛогаСИменем(Парам01,Парам02)","ЯУстанавливаюУровеньОтладкиДляЛогаСИменем","и я устанавливаю уровень отладки ""Отладка"" для лога с именем """"","","");

	Возврат ВсеТесты;
КонецФункции
	
&НаСервере
// Служебная функция.
Функция ПолучитьМакетСервер(ИмяМакета)
	ОбъектСервер = РеквизитФормыВЗначение("Объект");
	Возврат ОбъектСервер.ПолучитьМакет(ИмяМакета);
КонецФункции
	
&НаКлиенте
// Служебная функция для подключения библиотеки создания fixtures.
Функция ПолучитьМакетОбработки(ИмяМакета) Экспорт
	Возврат ПолучитьМакетСервер(ИмяМакета);
КонецФункции



///////////////////////////////////////////////////
//Работа со сценариями
///////////////////////////////////////////////////

&НаКлиенте
// Функция выполняется перед началом каждого сценария
Функция ПередНачаломСценария() Экспорт
	лЛог.ОчиститьСписокЛогов();
КонецФункции

&НаКлиенте
// Функция выполняется перед окончанием каждого сценария
Функция ПередОкончаниемСценария() Экспорт
	
КонецФункции



///////////////////////////////////////////////////
//Реализация шагов
///////////////////////////////////////////////////

&НаКлиенте
//И я очищаю регистр сообщений логирования
//@ЯОчищаюРегистрСообщенийЛогирования()
Функция ЯОчищаюРегистрСообщенийЛогирования() Экспорт
	ОчиститьРегистрЛогов();
КонецФункции

&НаСервере
Процедура ОчиститьРегистрЛогов()
	Выборка = РегистрыСведений.лСообщенияЛогирования.Выбрать();
	Пока Выборка.Следующий() Цикл
		Запись = Выборка.ПолучитьМенеджерЗаписи();
		Запись.Удалить();
	КонецЦикла;
КонецПроцедуры

&НаКлиенте
//и я вывожу лог с уровнем логирования Предупреждение сообщение "Предупреждение Лог, который смог" в лог с именем ""
//@ЯВывожуЛогСУровнемЛогированияПредупреждениеСообщениеВЛогСИменем(Парам01,Парам02)
Функция ЯВывожуЛогСУровнемЛогированияПредупреждениеСообщениеВЛогСИменем(Сообщение,ИмяЛога) Экспорт
	ТекИмяЛога = ИмяЛога;
	Если НЕ ЗначениеЗаполнено(ТекИмяЛога) Тогда
		ТекИмяЛога = Неопределено;
	КонецЕсли;
	
	лЛог.Пред_(Сообщение, ТекИмяЛога);
КонецФункции

&НаКлиенте
//и я вывожу лог с уровнем логирования Ошибка сообщение "Ошибка Лог, который смог" в лог с именем ""
//@ЯВывожуЛогСУровнемЛогированияОшибкаСообщениеВЛогСИменем(Парам01,Парам02)
Функция ЯВывожуЛогСУровнемЛогированияОшибкаСообщениеВЛогСИменем(Сообщение,ИмяЛога) Экспорт
	ТекИмяЛога = ИмяЛога;
	Если НЕ ЗначениеЗаполнено(ТекИмяЛога) Тогда
		ТекИмяЛога = Неопределено;
	КонецЕсли;
	
	лЛог.Ош_(Сообщение, ТекИмяЛога);
КонецФункции

&НаКлиенте
//и я вывожу лог с уровнем логирования КритическаяОшибка сообщение "КритическаяОшибка Лог, который смог" в лог с именем ""
//@ЯВывожуЛогСУровнемЛогированияКритическаяОшибкаСообщениеВЛогСИменем(Парам01,Парам02)
Функция ЯВывожуЛогСУровнемЛогированияКритическаяОшибкаСообщениеВЛогСИменем(Сообщение,ИмяЛога) Экспорт
	ТекИмяЛога = ИмяЛога;
	Если НЕ ЗначениеЗаполнено(ТекИмяЛога) Тогда
		ТекИмяЛога = Неопределено;
	КонецЕсли;
	
	лЛог.Крит_(Сообщение, ТекИмяЛога);
КонецФункции

&НаКлиенте
//и я устанавливаю уровень отладки "Отладка" для лога с именем ""
//@ЯУстанавливаюУровеньОтладкиДляЛогаСИменем(Парам01,Парам02)
Функция ЯУстанавливаюУровеньОтладкиДляЛогаСИменем(УровеньЛогирования,ИмяЛога) Экспорт
	ТекИмяЛога = ИмяЛога;
	Если НЕ ЗначениеЗаполнено(ТекИмяЛога) Тогда
		ТекИмяЛога = Неопределено;
	КонецЕсли;
	
	лЛог.УстановитьУровеньЛогирования(УровеньЛогирования, ТекИмяЛога);
КонецФункции
