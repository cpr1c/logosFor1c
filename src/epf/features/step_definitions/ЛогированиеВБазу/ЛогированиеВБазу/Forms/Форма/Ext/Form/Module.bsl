
#Область Служебные_функции_и_процедуры

&НаКлиенте
// контекст фреймворка Vanessa-Automation
Перем Ванесса;
 
&НаКлиенте
// Структура, в которой хранится состояние сценария между выполнением шагов. Очищается перед выполнением каждого сценария.
Перем Контекст Экспорт;
 
&НаКлиенте
// Структура, в которой можно хранить служебные данные между запусками сценариев. Существует, пока открыта форма Vanessa-Automation.
Перем КонтекстСохраняемый Экспорт;

&НаКлиенте
// Функция экспортирует список шагов, которые реализованы в данной внешней обработке.
Функция ПолучитьСписокТестов(КонтекстФреймворкаBDD) Экспорт
	Ванесса = КонтекстФреймворкаBDD;
	
	ВсеТесты = Новый Массив;

	//описание параметров
	//Ванесса.ДобавитьШагВМассивТестов(ВсеТесты,Снипет,ИмяПроцедуры,ПредставлениеТеста,ОписаниеШага,ТипШага,Транзакция,Параметр);

	Ванесса.ДобавитьШагВМассивТестов(ВсеТесты,"ВОкнеСообщенийПользователюНетСообщений()","ВОкнеСообщенийПользователюНетСообщений","И в регистре логов нет записей","","");
	Ванесса.ДобавитьШагВМассивТестов(ВсеТесты,"КоличествоСообщениеПользователюРавно(Парам01)","КоличествоСообщениеПользователюРавно","И количество сообщений в регистре логов равно 1	","","");
	Ванесса.ДобавитьШагВМассивТестов(ВсеТесты,"ВРегистреЛоговНетЗаписей()","ВРегистреЛоговНетЗаписей","И количество сообщений в регистре логов равно 0","","");
	Ванесса.ДобавитьШагВМассивТестов(ВсеТесты,"ЯДобавляюВЛогПоУмолчаниюСпособЛогированияБаза()","ЯДобавляюВЛогПоУмолчаниюСпособЛогированияБаза","И я добавляю в лог по умолчанию способ логирования База","","");
	Ванесса.ДобавитьШагВМассивТестов(ВсеТесты,"КоличествоСообщенийВРегистреЛоговРавно(Парам01)","КоличествоСообщенийВРегистреЛоговРавно","И количество сообщений в регистре логов равно 0","","");
	Ванесса.ДобавитьШагВМассивТестов(ВсеТесты,"ЯДобавляюВЛогСИменемСпособЛогированияБаза(Парам01)","ЯДобавляюВЛогСИменемСпособЛогированияБаза","И я добавляю в лог с именем ""ЛогироватьНеУмею"" способ логирования База","","");
	Ванесса.ДобавитьШагВМассивТестов(ВсеТесты,"ЯВывожуЛогСУровнемЛогированияИнформацияСообщениеНаСервереВЛогСИменем(Парам01,Парам02)","ЯВывожуЛогСУровнемЛогированияИнформацияСообщениеНаСервереВЛогСИменем","и я вывожу лог с уровнем логирования информация сообщение на сервере ""Привет. Это лог отладки"" в лог с именем ""ЛогироватьНеУмею""","","");

	Возврат ВсеТесты;
КонецФункции
	
&НаСервере
// Служебная функция.
Функция ПолучитьМакетСервер(ИмяМакета)
	ОбъектСервер = РеквизитФормыВЗначение("Объект");
	Возврат ОбъектСервер.ПолучитьМакет(ИмяМакета);
КонецФункции
	
&НаКлиенте
// Служебная функция для подключения библиотеки создания fixtures.
Функция ПолучитьМакетОбработки(ИмяМакета) Экспорт
	Возврат ПолучитьМакетСервер(ИмяМакета);
КонецФункции

#КонецОбласти



#Область Работа_со_сценариями

&НаКлиенте
// Функция выполняется перед началом каждого сценария
Функция ПередНачаломСценария() Экспорт
	лЛог.ОчиститьСписокЛогов();
	ОчиститьРегистрЛогов();
КонецФункции

&НаКлиенте
// Функция выполняется перед окончанием каждого сценария
Функция ПередОкончаниемСценария() Экспорт
	
КонецФункции

#КонецОбласти

&НаСервере
Процедура ОчиститьРегистрЛогов()
	Выборка = РегистрыСведений.лСообщенияЛогирования.Выбрать();
	Пока Выборка.Следующий() Цикл
		Запись = Выборка.ПолучитьМенеджерЗаписи();
		Запись.Удалить();
	КонецЦикла;
КонецПроцедуры


///////////////////////////////////////////////////
//Реализация шагов
///////////////////////////////////////////////////

&НаКлиенте
//И я добавляю в лог по умолчанию способ логирования База
//@ЯДобавляюВЛогПоУмолчаниюСпособЛогированияБаза()
Функция ЯДобавляюВЛогПоУмолчаниюСпособЛогированияБаза() Экспорт
	лЛог.ДобавитьСпособЛогированияБаза();	
КонецФункции

&НаКлиенте
//И количество сообщений в регистре логов равно 0
//@ВРегистреЛоговНетЗаписей()
Функция ВРегистреЛоговНетЗаписей() Экспорт
	КоличествоСообщенийВРегистреЛоговРавно(0);
КонецФункции

&НаКлиенте
//И количество сообщений в регистре логов равно 1
//@КоличествоСообщенийВРегистреЛоговРавно(Парам01)
Функция КоличествоСообщенийВРегистреЛоговРавно(КоличествоСообщений) Экспорт
	Ванесса.ПроверитьРавенство(КоличествоСообщенийВРегистреЛогов(), КоличествоСообщений);
КонецФункции


&НаСервере
Функция КоличествоСообщенийВРегистреЛогов()
	Запрос = Новый Запрос;
	Запрос.Текст=
	"ВЫБРАТЬ
	|	лСообщенияЛогирования.ИмяСобытия КАК ИмяСобытия,
	|	лСообщенияЛогирования.НомерСеанса КАК НомерСеанса,
	|	лСообщенияЛогирования.Дата КАК Дата,
	|	лСообщенияЛогирования.Идентификатор КАК Идентификатор
	|ИЗ
	|	РегистрСведений.лСообщенияЛогирования КАК лСообщенияЛогирования";
	
	Результат = Запрос.Выполнить().Выбрать();
	
	Возврат Результат.Количество();
КонецФункции

&НаКлиенте
//И я добавляю в лог с именем "ЛогироватьНеУмею" способ логирования База
//@ЯДобавляюВЛогСИменемСпособЛогированияБаза(Парам01)
Функция ЯДобавляюВЛогСИменемСпособЛогированияБаза(ИмяЛога) Экспорт
	лЛог.ДобавитьСпособЛогированияБаза(ИмяЛога);	
КонецФункции

&НаКлиенте
//и я вывожу лог с уровнем логирования информация сообщение на сервере "Привет. Это лог отладки" в лог с именем "ЛогироватьНеУмею"
//@ЯВывожуЛогСУровнемЛогированияИнформацияСообщениеНаСервереВЛогСИменем(Парам01,Парам02)
Функция ЯВывожуЛогСУровнемЛогированияИнформацияСообщениеНаСервереВЛогСИменем(Сообщение,ИмяЛога) Экспорт
	ВывестиСообщениеВЛогНаСервереИнформация(Сообщение, ИмяЛога);
КонецФункции

&НаСервере
Процедура ВывестиСообщениеВЛогНаСервереИнформация(Сообщение, ИмяЛога) 
	Если Не ЗначениеЗаполнено(ИмяЛога) Тогда
		лЛог.Инф_(Сообщение);
	Иначе
		лЛог.Инф_(Сообщение, ИмяЛога);
	КонецЕсли;

КонецПроцедуры
