#Область ПрограммныйИнтерфейс

Функция НовыйЛог(ИмяЛога = "", Уровень = "") Экспорт
	
	ИмяЛогаДляСоздания = ИмяЛога;
	Если Не ЗначениеЗаполнено(ИмяЛогаДляСоздания) Тогда
		ИмяЛогаДляСоздания = ИмяЛогаПоУмолчанию();
	КонецЕсли;
	
	ПараметрыЛога = НовыйПустойЛог(ИмяЛогаДляСоздания);
	Если ЗначениеЗаполнено(Уровень) Тогда
		ПараметрыЛога.Уровень = Уровень;
	КонецЕсли;	
	
	#Если Клиент Или ВнешнееСоединение Тогда
	ЦПР_Л_ПараметрыСеанса.Логи.Вставить(ИмяЛогаДляСоздания, ПараметрыЛога);
	#КонецЕсли
	МодульлЛогСлужебныйСервер().ДобавитьТекущийЛогНаСервер(ИмяЛогаДляСоздания, ПараметрыЛога);
	Возврат ПараметрыЛога;
КонецФункции

Процедура ДобавитьСпособЛогирования(Способ, Параметры, ЛогИлиИмяЛога, Контекст = "") Экспорт
	ТекущийЛог = ТекущийЛог(ЛогИлиИмяЛога);
	Если ТекущийЛог = Неопределено Тогда
		Возврат;
	КонецЕсли;

	ТекущийСпособЛогирования = ТекущийСпособЛогирования(Способ);
	Если ТекущийСпособЛогирования = Неопределено Тогда
		Возврат;
	КонецЕсли;

	Если ТекущийСпособЛогирования.ЗапретДублейУЛога И ЕстьСпособЛогированияДляЛога(ТекущийЛог,
		ТекущийСпособЛогирования) Тогда
		Возврат;
	КонецЕсли;
	
	ДобавляемыйСпособ = Новый Структура;
	ДобавляемыйСпособ.Вставить("Способ", ТекущийСпособЛогирования);
	ДобавляемыйСпособ.Вставить("Параметры", Параметры);
	
	КонтекстыЛогирования = КонтекстыЛогирования();
	Если Не ЗначениеЗаполнено(Контекст) Тогда
		ДобавляемыйКонтекст = КонтекстыЛогирования.КлиентСервер;
	Иначе
		ДобавляемыйКонтекст = КонтекстыЛогирования[Контекст];
	КонецЕсли;
	ДобавляемыйСпособ.Вставить("Контекст", ДобавляемыйКонтекст);
	
	ТекущийЛог.Способы.Добавить(ДобавляемыйСпособ);	
	
	МодульлЛогСлужебныйСервер().ДобавитьТекущийЛогНаСервер(ТекущийЛог.Имя, ТекущийЛог);
КонецПроцедуры

Процедура ЗаписатьНовоеСообщениеВЛог(Сообщение, УровеньЛогирования, ЛогИлиИмяЛога) Экспорт
	ТекущийЛог = ТекущийЛог(ЛогИлиИмяЛога);
	Если ТекущийЛог = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	Если Не ВозможнаЗаписьЛога(ТекущийЛог, УровеньЛогирования) Тогда
		Возврат;
	КонецЕсли;
	
	Для Каждого ТекСпособ ИЗ ТекущийЛог.Способы Цикл
		ЗаписатьЛогПоСпособу(ТекущийЛог, ТекСпособ, УровеньЛогирования, Сообщение);
	КонецЦикла;
КонецПроцедуры

Процедура ЗаписатьЛогПоСпособу(Лог, СпособЛогированияДляЛога, УровеньЛогирования, Сообщение) Экспорт
	Если Не КонтекстСпособаЛогированияАктуален(СпособЛогированияДляЛога.Контекст) Тогда
		Возврат;
	КонецЕсли;
	
	Если СпособЛогированияДляЛога.Способ.ЗаписьНаСервере Тогда
		МодульлЛогСлужебныйСервер().ВыполнитьЗаписьЛогаПоСпособу(Лог, СпособЛогированияДляЛога, УровеньЛогирования, Сообщение);
	Иначе
		ВыполнитьЗаписьЛогаПоСпособу(Лог, СпособЛогированияДляЛога, УровеньЛогирования, Сообщение);
	КонецЕсли;
КонецПроцедуры

Функция СпособыЛогирования() Экспорт
	Способы = Новый Структура;
	Способы.Вставить("Консоль", НовыйСпособЛогирования("Консоль"));
	Способы.Вставить("ЖурналРегистрации", НовыйСпособЛогирования("ЖурналРегистрации",Истина));
	Способы.Вставить("Память", НовыйСпособЛогирования("Память"));
	Способы.Вставить("Файл", НовыйСпособЛогирования("Файл",,Ложь));
	Способы.Вставить("База", НовыйСпособЛогирования("База",Истина));
	Способы.Вставить("КаталогФайлов", НовыйСпособЛогирования("КаталогФайлов",,Ложь));
	
	//Способы логирования из общего модуля
	#Если Клиент Или ВнешнееСоединение Тогда
		ТекСпособыИзОбщегоМодуля = ЦПР_Л_ПараметрыСеанса.СпособыЛогированияОбщиеМодули;
	#Иначе
		ТекущиеПараметрыСеанса = МодульлЛогСлужебныйСервер().ТекущиеПараметрыСеансаНаСервере();
		ТекСпособыИзОбщегоМодуля = ТекущиеПараметрыСеанса.СпособыЛогированияОбщиеМодули;
	#КонецЕсли
	
	Для Каждого КлючЗначение Из ТекСпособыИзОбщегоМодуля Цикл
		Способы.Вставить(КлючЗначение.Ключ, КлючЗначение.Значение);
	КонецЦикла;
	
	МодульлЛогПереопределяемый().ПриОпределенииСпособовЛогирования(Способы);
	
	Возврат Способы;
КонецФункции

Функция УровниЛогирования() Экспорт
	Уровни = Новый Структура;
	Уровни.Вставить("Нет", НовыйУровеньЛогирования("Нет", 999));
	Уровни.Вставить("Отладка", НовыйУровеньЛогирования("Отладка", 0));
	Уровни.Вставить("Информация", НовыйУровеньЛогирования("Информация", 1));
	Уровни.Вставить("Предупреждение", НовыйУровеньЛогирования("Предупреждение", 2));
	Уровни.Вставить("Ошибка", НовыйУровеньЛогирования("Ошибка", 3));
	Уровни.Вставить("КритическаяОшибка", НовыйУровеньЛогирования("КритическаяОшибка", 4));
	
	Возврат Уровни;
КонецФункции

Функция ПараметрыСпособаЛогирования(СпособИлиИмяСпособа) Экспорт
	ТекущийСпособ = ТекущийСпособЛогирования(СпособИлиИмяСпособа);
	Если ТекущийСпособ = Неопределено Тогда
		Возврат Неопределено;
	КонецЕсли;
	
	СпособыЛогирования = СпособыЛогирования();
	Если ТекущийСпособ.Имя = СпособыЛогирования.База.Имя Тогда
		Возврат Неопределено;
	ИначеЕсли ТекущийСпособ.Имя = СпособыЛогирования.Консоль.Имя Тогда 
		Возврат Неопределено;
	ИначеЕсли ТекущийСпособ.Имя = СпособыЛогирования.ЖурналРегистрации.Имя Тогда 
		Возврат Неопределено;
	ИначеЕсли ТекущийСпособ.Имя = СпособыЛогирования.Память.Имя Тогда 
		Возврат Неопределено;
	ИначеЕсли ТекущийСпособ.Имя = СпособыЛогирования.Файл.Имя Тогда 
		ПараметрыСпособа = Новый Структура;
		ПараметрыСпособа.Вставить("ИмяФайла", "");
		
		Возврат ПараметрыСпособа;
	ИначеЕсли ТекущийСпособ.Имя = СпособыЛогирования.КаталогФайлов.Имя Тогда 
		ПараметрыСпособа = Новый Структура;
		ПараметрыСпособа.Вставить("Каталог", "");
		ПараметрыСпособа.Вставить("ШаблонИмениФайла", "[ИМЯЛОГА].txt");
		
		Возврат ПараметрыСпособа;
	ИначеЕсли ЗначениеЗаполнено(ТекущийСпособ.ИмяОбщегоМодуля) Тогда 
		ОбщийМодуль = ОбщийМодульПоИмени(ТекущийСпособ.ИмяОбщегоМодуля);
		Попытка
			Возврат ОбщийМодуль.НовыйПараметрыСпособаЛогирования();
		Исключение
			Возврат Неопределено;
		КонецПопытки;
	Иначе
		ПараметрыСпособа = Неопределено;
		МодульлЛогПереопределяемый().ПриОпределенииПараметровСпособаЛогирования(ТекущийСпособ.Имя, ПараметрыСпособа);
		
		Возврат ПараметрыСпособа;
	КонецЕсли;
КонецФункции 

Процедура ОтключитьЛог(ЛогИлиИмяЛога = Неопределено) Экспорт
	ТекущийЛог = ТекущийЛог(ЛогИлиИмяЛога);
	Если ТекущийЛог = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	ТекущийЛог.Использование = Ложь;
	МодульлЛогСлужебныйСервер().ДобавитьТекущийЛогНаСервер(ТекущийЛог.Имя, ТекущийЛог);
	
КонецПроцедуры

Процедура ВключитьЛог(ЛогИлиИмяЛога = Неопределено) Экспорт
	ТекущийЛог = ТекущийЛог(ЛогИлиИмяЛога);
	Если ТекущийЛог = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	ТекущийЛог.Использование = Истина;
	МодульлЛогСлужебныйСервер().ДобавитьТекущийЛогНаСервер(ТекущийЛог.Имя, ТекущийЛог);
	
КонецПроцедуры

Процедура УстановитьУровеньЛогирования(Уровень, ЛогИлиИмяЛога = Неопределено) Экспорт
	ТекущийЛог = ТекущийЛог(ЛогИлиИмяЛога);
	Если ТекущийЛог = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	Если ТипЗнч(Уровень) = Тип("Строка") Тогда
		ТекущийЛог.Уровень = УровниЛогирования()[Уровень];
	Иначе
		ТекущийЛог.Уровень = Уровень;
	КонецЕсли;
	МодульлЛогСлужебныйСервер().ДобавитьТекущийЛогНаСервер(ТекущийЛог.Имя, ТекущийЛог);
	
КонецПроцедуры

Функция ДанныеЛога(ЛогИлиИмяЛога = Неопределено) Экспорт
	ТекущийЛог = ТекущийЛог(ЛогИлиИмяЛога);
	Если ТекущийЛог = Неопределено Тогда
		Возврат Новый Массив;
	КонецЕсли;
	
	Возврат ТекущийЛог.ДанныеСессии;
КонецФункции

Процедура ОчиститьСписокЛогов() Экспорт
	#Если Клиент Или ВнешнееСоединение Тогда
	ЦПР_Л_ПараметрыСеанса.Логи.Очистить();	
	#КонецЕсли
	МодульлЛогСлужебныйСервер().ОчиститьСписокТекущихЛоговНаСервере();	
КонецПроцедуры

Функция АктивныеЛоги() Экспорт
	#Если Клиент Или ВнешнееСоединение Тогда
	Возврат ЦПР_Л_ПараметрыСеанса.Логи;	
	#Иначе
	Возврат МодульлЛогСлужебныйСервер().ТекущиеЛогиНаСервере();
	#КонецЕсли	
КонецФункции

Процедура ЗавершитьЛогирование(ЛогИлиИмяЛога = Неопределено) Экспорт
	ТекущийЛог = ТекущийЛог(ЛогИлиИмяЛога);
	Если ТекущийЛог = Неопределено Тогда
		Возврат;
	КонецЕсли;

	#Если Клиент Или ВнешнееСоединение Тогда
	УдалитьЛогИзХранилищаЛогов(ЦПР_Л_ПараметрыСеанса.Логи, ТекущийЛог);
	#КонецЕсли
	
	МодульлЛогСлужебныйСервер().УдалитьЛогИзХранилищаЛогов(ТекущийЛог);	
КонецПроцедуры

Процедура УстановитьШаблонСообщения(Шаблон, ЛогИлиИмяЛога = Неопределено) Экспорт
	ТекущийЛог = ТекущийЛог(ЛогИлиИмяЛога);
	Если ТекущийЛог = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	ТекущийЛог.Шаблон = Шаблон;
	МодульлЛогСлужебныйСервер().ДобавитьТекущийЛогНаСервер(ТекущийЛог.Имя, ТекущийЛог);
КонецПроцедуры

#Если Клиент Или ВнешнееСоединение Тогда
	
Процедура ОбновитьЛогиНаКлиентеПоДаннымСервера() Экспорт
	ЛогиСервера = МодульлЛогСлужебныйСервер().ТекущиеЛогиНаСервере();
	
	ЛогиКлиента = ЦПР_Л_ПараметрыСеанса.Логи;
	
	НовыеЛоги = Новый Соответствие;
	
	Для Каждого КлючЗначение Из ЛогиСервера Цикл
		ЛогСервера = КлючЗначение.Значение;
		ЛогКлиента = ЛогиКлиента[КлючЗначение.Ключ];
		
		НовыеЛоги.Вставить(КлючЗначение.Ключ, ЛогСервера);
		
		Если ЛогКлиента<>Неопределено Тогда
			НовыеЛоги[КлючЗначение.Ключ].ДанныеСессии = ЛогКлиента.ДанныеСессии;
		КонецЕсли;
	КонецЦикла;
	
	ЦПР_Л_ПараметрыСеанса.Логи = НовыеЛоги;
КонецПроцедуры

#КонецЕсли

#КонецОбласти

#Область СлужебныйПрограммныйИнтерфейс

Функция НовыйПараметрыСеанса() Экспорт
	НовыеПараметрыСеанса = Новый Структура;
	НовыеПараметрыСеанса.Вставить("НомерСеанса", 0);
	НовыеПараметрыСеанса.Вставить("Логи", Новый Соответствие);
	НовыеПараметрыСеанса.Вставить("СпособыЛогированияОбщиеМодули", Новый Структура);
	Возврат НовыеПараметрыСеанса;
КонецФункции

Процедура ОпределитьСпособЛогированияИзОбщегоМодуля(Способы, ИмяОбщегоМодуля) Экспорт
	ОбщийМодуль = ОбщийМодульПоИмени(ИмяОбщегоМодуля);

	Если ОбщийМодуль = Неопределено Тогда
		Возврат;
	КонецЕсли;
		
	НовыйСпособ = НовыйСпособЛогирования();
	
	Попытка 
		НовыйСпособ.Имя = ОбщийМодуль.Имя();
	Исключение
		Префикс = ПрефиксОбщихМодулейОпределяющихСпособыЛогирования();
		Если СтрНачинаетсяС(НРег(ИмяОбщегоМодуля), НРег(Префикс)) Тогда
			НовыйСпособ.Имя = Сред(ИмяОбщегоМодуля, СтрДлина(Префикс)+1);
		Иначе
			НовыйСпособ.Имя = ИмяОбщегоМодуля;
		КонецЕсли;
			
	КонецПопытки;

	Попытка
		НовыйСпособ.ЗаписьНаСервере = ОбщийМодуль.ЗаписьТолькоНаСервере();
	Исключение
	КонецПопытки;	

	Попытка
		НовыйСпособ.ЗапретДублейУЛога = ОбщийМодуль.ЗапретДублейУЛога();
	Исключение
	КонецПопытки;

	НовыйСпособ.ИмяОбщегоМодуля = ИмяОбщегоМодуля;
	
	Способы.Вставить(НовыйСпособ.Имя, НовыйСпособ);	
КонецПроцедуры

Функция ОбщийМодульПоИмени(ИмяМодуля) Экспорт
	Если Не ИмяПеременнойВалидно(ИмяМодуля) Тогда
		Возврат Неопределено;
	КонецЕсли;
	
	Попытка
		ОбщийМодуль = Вычислить(ИмяМодуля);
	Исключение
		ОбщийМодуль = Неопределено;
	КонецПопытки;
	Возврат ОбщийМодуль;
КонецФункции

Процедура УдалитьЛогИзХранилищаЛогов(ХранилищеЛогов, Лог) Экспорт
	Если ХранилищеЛогов[Лог.Имя] = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	ХранилищеЛогов.Удалить(Лог.Имя);
КонецПроцедуры

Процедура ВыполнитьЗаписьЛогаПоСпособу(Лог, СпособЛогированияДляЛога, УровеньЛогирования, Сообщение) Экспорт
	
	СпособЛогирования = СпособЛогированияДляЛога.Способ;
	Параметры = СпособЛогированияДляЛога.Параметры;
	
	СообщениеДляЗаписи = СтрокаСообщенияЛога(Сообщение, УровеньЛогирования, Лог, СпособЛогирования);
	
	Способы = СпособыЛогирования();
	Если СпособЛогирования.Имя = Способы.Консоль.Имя Тогда
		ВывестиСообщениеВКонсоль(Лог, СообщениеДляЗаписи, УровеньЛогирования);
	ИначеЕсли СпособЛогирования.Имя = Способы.ЖурналРегистрации.Имя Тогда 
		МодульлЛогСлужебныйСервер().ВывестиСообщениеВЖурналРегистрации(Лог, СообщениеДляЗаписи, УровеньЛогирования);
	ИначеЕсли СпособЛогирования.Имя = Способы.База.Имя Тогда 
		МодульлЛогСлужебныйСервер().ЗаписатьСообщениеЛогаВБазу(Лог, СообщениеДляЗаписи, УровеньЛогирования);
	ИначеЕсли СпособЛогирования.Имя = Способы.Память.Имя Тогда 
		ВывестиСообщениеВПамять(Лог, СообщениеДляЗаписи, УровеньЛогирования);
	ИначеЕсли СпособЛогирования.Имя = Способы.Файл.Имя Тогда 
		ВывестиСообщениеВФайл(Лог, СообщениеДляЗаписи, УровеньЛогирования, Параметры);
	ИначеЕсли СпособЛогирования.Имя = Способы.КаталогФайлов.Имя Тогда 
		ВывестиСообщениеВКаталогФайлов(Лог, СообщениеДляЗаписи, УровеньЛогирования, Параметры);
	ИначеЕсли ЗначениеЗаполнено(СпособЛогирования.ИмяОбщегоМодуля) Тогда 
		ОбщийМодуль = ОбщийМодульПоИмени(СпособЛогирования.ИмяОбщегоМодуля);
		ОбщийМодуль.ЗаписатьСообщениеВЛог(СообщениеДляЗаписи, Лог, УровеньЛогирования, Параметры);
	Иначе
		МодульлЛогПереопределяемый().ПриВыводеСообщенияВЛогПоСпособу(СообщениеДляЗаписи, Лог, УровеньЛогирования, СпособЛогирования.Имя, Параметры);
	КонецЕсли;

КонецПроцедуры

Функция ТекущийЛог(ЛогИлиИмяЛога) Экспорт
	Если ЛогИлиИмяЛога = Неопределено Или Не ЗначениеЗаполнено(ЛогИлиИмяЛога) Тогда
		Возврат ЛогПоИмени(ИмяЛогаПоУмолчанию());
	ИначеЕсли ТипЗнч(ЛогИлиИмяЛога) = Тип("Строка") Тогда
		Возврат ЛогПоИмени(ЛогИлиИмяЛога);
	ИначеЕсли ТипЗнч(ЛогИлиИмяЛога) = Тип("Структура") Тогда
		Возврат ЛогИлиИмяЛога;
	Иначе
		Возврат Неопределено;
	КонецЕсли;
КонецФункции

Функция НовыйСпособЛогирования(Имя ="", ЗаписьНаСервере = Ложь, ЗапретДублейУЛога = Истина) Экспорт
	Способ = Новый Структура;
	Способ.Вставить("Имя",Имя);
	Способ.Вставить("ЗаписьНаСервере", ЗаписьНаСервере);
	Способ.Вставить("ЗапретДублейУЛога", ЗапретДублейУЛога);
	Способ.Вставить("ИмяОбщегоМодуля", "");
	
	Возврат Способ;
КонецФункции

Функция ПрефиксОбщихМодулейОпределяющихСпособыЛогирования() Экспорт
	Префикс = "лЛогСпособЛогирования";
	
	МодульлЛогПереопределяемый().ПриОпределенииПрефиксаОбщихМодулейОпределяющихСпособыЛогирования(Префикс);
	
	Возврат Префикс;
КонецФункции

Функция Версия() Экспорт
	
КонецФункции

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

#Область ВыводСообщенийВПредопределенныеКаналыЛогирования

Процедура ВывестиСообщениеВКонсоль(Лог, Сообщение, УровеньЛогирования)
	УровниЛогирования = УровниЛогирования();
	
	Если УровеньЛогирования.Имя = УровниЛогирования.Информация.Имя Тогда
		Статус = СтатусСообщения.Информация;
	ИначеЕсли УровеньЛогирования.Имя = УровниЛогирования.Предупреждение.Имя Тогда 
		Статус = СтатусСообщения.Внимание;
	ИначеЕсли УровеньЛогирования.Имя = УровниЛогирования.Ошибка.Имя Тогда 
		Статус = СтатусСообщения.Важное;
	ИначеЕсли УровеньЛогирования.Имя = УровниЛогирования.КритическаяОшибка.Имя Тогда 
		Статус = СтатусСообщения.ОченьВажное;
	Иначе 
		Статус = СтатусСообщения.Обычное;
	КонецЕсли;
	
	Сообщить(Сообщение,Статус);
	
КонецПроцедуры

Процедура ВывестиСообщениеВПамять(Лог, Сообщение, УровеньЛогирования)
	Лог.ДанныеСессии.Добавить(Сообщение);	
КонецПроцедуры

Процедура ВывестиСообщениеВФайл(Лог, Сообщение, УровеньЛогирования, ПараметрыВывода)
	ЗаписатьСтрокуВФайл(ПараметрыВывода.ИмяФайла, Сообщение);
КонецПроцедуры

Процедура ВывестиСообщениеВКаталогФайлов(Лог, Сообщение, УровеньЛогирования, ПараметрыВывода)
	ТекДата = ТекущаяДата();
	
	ИмяФайлаВКаталоге = ПараметрыВывода.ШаблонИмениФайла;
	ИмяФайлаВКаталоге = СтрЗаменить(ИмяФайлаВКаталоге, "[ИМЯЛОГА]", Лог.Имя);
	ИмяФайлаВКаталоге = СтрЗаменить(ИмяФайлаВКаталоге, "[ДАТА]", Формат(ТекДата, "ДФ=dd.MM.yyyy;"));
	ИмяФайлаВКаталоге = СтрЗаменить(ИмяФайлаВКаталоге, "[ДЕНЬ]", Формат(День(ТекДата), "ЧГ=0;"));
	ИмяФайлаВКаталоге = СтрЗаменить(ИмяФайлаВКаталоге, "[ДЕНЬНЕДЕЛИ]", Формат(ДеньНедели(ТекДата), "ЧГ=0;"));
	ИмяФайлаВКаталоге = СтрЗаменить(ИмяФайлаВКаталоге, "[МЕСЯЦ]", Формат(Месяц(ТекДата), "ЧГ=0;"));
	ИмяФайлаВКаталоге = СтрЗаменить(ИмяФайлаВКаталоге, "[ГОД]", Формат(Год(ТекДата), "ЧГ=0;"));
	ИмяФайлаВКаталоге = СтрЗаменить(ИмяФайлаВКаталоге, "[НОМЕРСЕАНСА]", Формат(Лог.НомерСеанса, "ЧГ=0;"));
	ИмяФайлаВКаталоге = СтрЗаменить(ИмяФайлаВКаталоге, "[ПОЛЬЗОВАТЕЛЬ]", Лог.ИмяПользователя);
	
	ЗаписатьСтрокуВФайл(ПараметрыВывода.Каталог+ПолучитьРазделительПути()+ИмяФайлаВКаталоге, Сообщение);
КонецПроцедуры

#КонецОбласти

Функция ИмяПеременнойВалидно(Имя)
	Попытка
		Стр = Новый Структура(Имя, Неопределено);
		Возврат Истина;
	Исключение
		Возврат Ложь;
	КонецПопытки;
КонецФункции

Процедура ЗаписатьСтрокуВФайл(ИмяФайла, СтрокаСообщения)
	ЗаписьТекста = Новый ЗаписьДанных(ИмяФайла,,,,Истина);
	ЗаписьТекста.ЗаписатьСтроку(СтрокаСообщения);
	ЗаписьТекста.Закрыть();
КонецПроцедуры

Функция СтрокаСообщенияЛога(Сообщение, УровеньЛогирования, Лог, СпособЛогирования) Экспорт
	
	ДатаСообщенияУниверсальнаяМС = ТекущаяУниверсальнаяДатаВМиллисекундах();
	ДатаСообщения				 = МестноеВремя('00010101'+ Цел(ДатаСообщенияУниверсальнаяМС/1000));
	ДатаМиллисекунды             = ДатаСообщенияУниверсальнаяМС % 1000; 
	ДатаПредставление            = Формат(ДатаСообщения, Лог.ФорматДаты);	
	ДатаПредставлениеМС          = Формат(ДатаМиллисекунды, "ЧЦ=3; ЧДЦ=0; ЧВН=; ЧГ=");
	
	СтрокаСообщения = Лог.Шаблон;
	СтрокаСообщения = СтрЗаменить(СтрокаСообщения, "%ДАТА%",                 ДатаПредставление);
	СтрокаСообщения = СтрЗаменить(СтрокаСообщения, "%ДАТАМС%",               ДатаПредставлениеМС);
	СтрокаСообщения = СтрЗаменить(СтрокаСообщения, "%УНИВЕРСАЛЬНАЯДАТАМС%",  Формат(ДатаСообщенияУниверсальнаяМС, "ЧГ="));
	СтрокаСообщения = СтрЗаменить(СтрокаСообщения, "%УРОВЕНЬ%",              Врег(УровеньЛогирования.Имя));
	СтрокаСообщения = СтрЗаменить(СтрокаСообщения, "%СООБЩЕНИЕ%",            Сообщение);
	СтрокаСообщения = СтрЗаменить(СтрокаСообщения, "%СОБЫТИЕ%",              Лог.ИмяСобытия);
		
	Возврат СтрокаСообщения;
	
КонецФункции

Функция ЕстьСпособЛогированияДляЛога(Лог, СпособЛогирования)
	Для Каждого ТекСпособ Из Лог.Способы Цикл
		Если ТекСпособ.Способ.Имя = СпособЛогирования.Имя Тогда
			Возврат Истина;
		КонецЕсли;
	КонецЦикла;
	Возврат Ложь;
КонецФункции

Функция ТекущийСпособЛогирования(СпособИлиИмяСпособа)
	Если ТипЗнч(СпособИлиИмяСпособа) = Тип("Строка") Тогда
		Способы = СпособыЛогирования();
		Возврат Способы[СпособИлиИмяСпособа];
	ИначеЕсли ТипЗнч(СпособИлиИмяСпособа) = Тип("Структура") Тогда
		Возврат СпособИлиИмяСпособа;
	Иначе
		Возврат Неопределено;
	КонецЕсли;
КонецФункции

Функция ЛогПоИмени(ИмяЛога)
	#Если Клиент Или ВнешнееСоединение Тогда
	Возврат ЦПР_Л_ПараметрыСеанса.Логи[ИмяЛога];
	#Иначе
	Возврат МодульлЛогСлужебныйСервер().ЛогПоИмениНаСервере(ИмяЛога);
	#КонецЕсли
КонецФункции

Функция НовыйПустойЛог(ИмяЛога) 
	Настройка = Новый Структура;
	Настройка.Вставить("Имя", ИмяЛога);
	Настройка.Вставить("Способы", Новый Массив);
	Настройка.Вставить("Уровень", УровниЛогирования().Информация);
	Настройка.Вставить("ДанныеСессии", Новый Массив);
	Настройка.Вставить("Использование", Истина);
	Настройка.Вставить("ИмяСобытия", "Логирование");
	Настройка.Вставить("Шаблон", "%ДАТА% - %УРОВЕНЬ% - %СООБЩЕНИЕ%");
	Настройка.Вставить("ФорматДаты", "ДФ='yyyy.MM.dd HH:mm:ss'");
	#Если Клиент Или ВнешнееСоединение Тогда
		Настройка.Вставить("НомерСеанса", ЦПР_Л_ПараметрыСеанса.НомерСеанса);
	#Иначе
		Настройка.Вставить("НомерСеанса", МодульлЛогСлужебныйСервер().НомерСеанса());
	#КонецЕсли
	#Если МобильноеПриложениеКлиент Тогда
	Настройка.Вставить("ИмяПользователя", МодульлЛогСлужебныйСервер().ИмяТекущегоПользователяБазы());
	#Иначе
	Настройка.Вставить("ИмяПользователя", ИмяПользователя());
	#КонецЕсли
	
	Возврат Настройка;
КонецФункции

Функция КонтекстСпособаЛогированияАктуален(Контекст)
	Контексты = КонтекстыЛогирования();
	
	#Если Клиент Тогда
	Возврат Контекст = Контексты.Клиент Или Контекст = Контексты.КлиентСервер;
	#Иначе
	Возврат Контекст = Контексты.Сервер Или Контекст = Контексты.КлиентСервер;
	#КонецЕсли
КонецФункции

Функция ВозможнаЗаписьЛога(Лог, Уровень)
	Если Не Лог.Использование Тогда
		Возврат Ложь;
	КонецЕсли;
	
	Если Лог.Уровень.Приоритет> Уровень.Приоритет Тогда
		Возврат Ложь;
	КонецЕсли;
	
	Возврат Истина;
КонецФункции

Функция НовыйУровеньЛогирования(Имя, Приоритет) 
	Уровень = Новый Структура;
	Уровень.Вставить("Имя", Имя);
	Уровень.Вставить("Приоритет", Приоритет);
	
	Возврат Уровень;
КонецФункции

Функция ИмяЛогаПоУмолчанию()
	Возврат "logFor1C";
КонецФункции

Функция КонтекстыЛогирования()
	Контексты = Новый Структура;
	Контексты.Вставить("Клиент", "Клиент");
	Контексты.Вставить("Сервер", "Сервер");
	Контексты.Вставить("КлиентСервер", "КлиентСервер");
	
	Возврат Контексты;
КонецФункции

#Область ПереопределениеМодулейПодсистемы

Функция ИмяРегистралСообщенияЛогирования() Экспорт
	Возврат "лСообщенияЛогирования";
КонецФункции

Функция МодульлЛогПереопределяемый()
	Возврат лЛогПереопределяемый;
КонецФункции

Функция МодульлЛогСлужебныйСервер()
	Возврат лЛогСлужебныйСервер;
КонецФункции

#КонецОбласти

#КонецОбласти
