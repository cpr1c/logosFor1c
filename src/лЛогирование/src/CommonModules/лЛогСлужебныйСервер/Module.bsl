#Область ПрограммныйИнтерфейс
// содержит экспортные процедуры и функции, предназначенные для использования другими объектами конфигурации или другими программами (например, через внешнее соединение).
#КонецОбласти

#Область СлужебныйПрограммныйИнтерфейс

Функция НомерСеанса() Экспорт
	Возврат НомерСеансаИнформационнойБазы();
КонецФункции

Функция ИмяТекущегоПользователяБазы() Экспорт
	Возврат ИмяПользователя();
КонецФункции

Процедура ВыполнитьЗаписьЛогаПоСпособу(Лог, СпособЛогированияДляЛога, УровеньЛогирования, Сообщение) Экспорт
	МодульлЛогСлужебный().ВыполнитьЗаписьЛогаПоСпособу(Лог, СпособЛогированияДляЛога, УровеньЛогирования, Сообщение);
КонецПроцедуры

Процедура ВывестиСообщениеВЖурналРегистрации(Лог, Сообщение, УровеньЛогирования) Экспорт
	УстановитьПривилегированныйРежим(Истина);

	УровеньЖР = СоответствиеУровнейЛогированияУровнямЖР()[УровеньЛогирования.Имя];
	Если УровеньЖР = Неопределено Тогда
		УровеньЖР = УровеньЖурналаРегистрации.Примечание;
	КонецЕсли;
	
	ИмяСобытия = Лог.ИмяСобытия;
	ЗаписьЖурналаРегистрации(ИмяСобытия, УровеньЖР, , , Сообщение);
КонецПроцедуры

Процедура ЗаписатьСообщениеЛогаВБазу(Лог, Сообщение, УровеньЛогирования) Экспорт
	УстановитьПривилегированныйРежим(Истина);
	ИмяСобытия = Лог.ИмяСобытия;

	ДатаЗаписи = ТекущаяДатаСеанса();
	ИдентификаторЗаписи = Строка(Новый УникальныйИдентификатор);
	
	МенеджерЗаписи = РегистрыСведений[МодульлЛогСлужебный().ИмяРегистралСообщенияЛогирования()].СоздатьМенеджерЗаписи();
	МенеджерЗаписи.ИмяСобытия = ИмяСобытия;
	МенеджерЗаписи.НомерСеанса = Лог.НомерСеанса;
	МенеджерЗаписи.Дата = ДатаЗаписи;
	МенеджерЗаписи.Идентификатор = ИдентификаторЗаписи;
	МенеджерЗаписи.Уровень = УровеньЛогирования.Имя;
	МенеджерЗаписи.ТекстСообщения = Сообщение;
	МенеджерЗаписи.ИмяПользователя = Лог.ИмяПользователя;
	
	Попытка
		МенеджерЗаписи.Записать();
	Исключение
		ЗаписатьОшибкуЛогированияВЖурналРегистрации(ИмяСобытия, ПодробноеПредставлениеОшибки(ИнформацияОбОшибке()));
	КонецПопытки;

КонецПроцедуры

Процедура ДобавитьТекущийЛогНаСервер(Имя, Лог) Экспорт
	ТекущиеЛоги = ТекущиеЛогиНаСервере();
	ТекущиеЛоги.Вставить(Имя, Лог);
	
	ЗаписатьТекущиеЛогиНаСервере(ТекущиеЛоги);
КонецПроцедуры

Функция ЛогПоИмениНаСервере(ИмяЛога) Экспорт
	ТекущиеЛоги = ТекущиеЛогиНаСервере();
	Возврат ТекущиеЛоги[ИмяЛога];
КонецФункции

Процедура ОчиститьСписокТекущихЛоговНаСервере() Экспорт
	ЗаписатьТекущиеЛогиНаСервере(Новый Соответствие);
КонецПроцедуры

Функция ТекущиеЛогиНаСервере() Экспорт
	ТекущиеПараметрыСеанса = ТекущиеПараметрыСеансаНаСервере();
	Возврат ТекущиеПараметрыСеанса.Логи;
КонецФункции

Процедура УдалитьЛогИзХранилищаЛогов(Лог) Экспорт
	ТекущиеЛоги = ТекущиеЛогиНаСервере();
	
	МодульлЛогСлужебный().УдалитьЛогИзХранилищаЛогов(ТекущиеЛоги, Лог);
	ЗаписатьТекущиеЛогиНаСервере(ТекущиеЛоги);

КонецПроцедуры

Процедура УстановитьПараметрыСеансаЛогирования() Экспорт
	ЦПР_Л_ПараметрыСеанса = МодульлЛогСлужебный().НовыйПараметрыСеанса();
	ЦПР_Л_ПараметрыСеанса.НомерСеанса = НомерСеанса();
	
	ПрефиксОбщихМодулейСоСпособамиЛогирования = МодульлЛогСлужебный().ПрефиксОбщихМодулейОпределяющихСпособыЛогирования();
	
	Для Каждого ТекОбщийМодуль Из Метаданные.ОбщиеМодули Цикл
		Если Не СтрНачинаетсяС(НРег(ТекОбщийМодуль.Имя), НРег(ПрефиксОбщихМодулейСоСпособамиЛогирования)) Тогда
			Продолжить;
		КонецЕсли;
		
		МодульлЛогСлужебный().ОпределитьСпособЛогированияИзОбщегоМодуля(ЦПР_Л_ПараметрыСеанса.СпособыЛогированияОбщиеМодули, ТекОбщийМодуль.Имя);	
	КонецЦикла;
	
	ЗаписатьПараметрыСеансаНаСервере(ЦПР_Л_ПараметрыСеанса);
КонецПроцедуры

Функция ТекущиеПараметрыСеансаНаСервере() Экспорт
	УстановитьПривилегированныйРежим(Истина);

	ПараметрыСеансаКВозврату = ПараметрыСеанса.лДанныеЛогирования.Получить();
	Если ПараметрыСеансаКВозврату = Неопределено Тогда
		ПараметрыСеансаКВозврату = МодульлЛогСлужебный().НовыйПараметрыСеанса();
		ПараметрыСеансаКВозврату.НомерСеанса = НомерСеанса();
	КонецЕсли;

	Возврат ПараметрыСеансаКВозврату;
КонецФункции

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

Процедура ЗаписатьПараметрыСеансаНаСервере(ПараметрыСеансаКЗаписи)
	УстановитьПривилегированныйРежим(Истина);

	ПараметрыСеанса.лДанныеЛогирования = Новый ХранилищеЗначения(ПараметрыСеансаКЗаписи);
	
КонецПроцедуры

Процедура ЗаписатьОшибкуЛогированияВЖурналРегистрации(ИмяСобытия, Текст)
	
	УстановитьПривилегированныйРежим(Истина);
	ЗаписьЖурналаРегистрации(ИмяСобытия, УровеньЖурналаРегистрации.Ошибка,,, Текст);
	
КонецПроцедуры

Функция СоответствиеУровнейЛогированияУровнямЖР()
	УровниЛогирования = МодульлЛогСлужебный().УровниЛогирования();

	Уровни = Новый Соответствие;
	Уровни.Вставить(УровниЛогирования.Отладка.Имя,			УровеньЖурналаРегистрации.Примечание);
	Уровни.Вставить(УровниЛогирования.Информация.Имя,		УровеньЖурналаРегистрации.Информация);
	Уровни.Вставить(УровниЛогирования.Предупреждение.Имя,	УровеньЖурналаРегистрации.Предупреждение);
	Уровни.Вставить(УровниЛогирования.Ошибка.Имя,			УровеньЖурналаРегистрации.Ошибка);
	Уровни.Вставить(УровниЛогирования.КритическаяОшибка.Имя,УровеньЖурналаРегистрации.Ошибка);
	
	Возврат Уровни;
	
КонецФункции

Процедура ЗаписатьТекущиеЛогиНаСервере(Логи)
	ТекущиеПараметрыСеанса = ТекущиеПараметрыСеансаНаСервере();
	ТекущиеПараметрыСеанса.Логи = Логи;
	
	ЗаписатьПараметрыСеансаНаСервере(ТекущиеПараметрыСеанса);
КонецПроцедуры

#Область ПереопределениеМодулейПодсистемы

Функция МодульлЛогСлужебный()
	Возврат лЛогСлужебный;
КонецФункции

#КонецОбласти

#КонецОбласти
