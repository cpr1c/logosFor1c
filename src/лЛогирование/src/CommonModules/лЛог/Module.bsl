#Область ПрограммныйИнтерфейс

#Область ВыводЛогов

#Область КраткиеВариантыЗаписи

Процедура Отл_(Сообщение, ЛогИлиИмяЛога = Неопределено) Экспорт
	Отладка_(Сообщение, ЛогИлиИмяЛога);
КонецПроцедуры

Процедура Пред_(Сообщение, ЛогИлиИмяЛога = Неопределено) Экспорт
	Предупреждение_(Сообщение, ЛогИлиИмяЛога);
КонецПроцедуры

Процедура Инф_(Сообщение, ЛогИлиИмяЛога = Неопределено) Экспорт
	Информация_(Сообщение, ЛогИлиИмяЛога);
КонецПроцедуры

Процедура Ош_(Сообщение, ЛогИлиИмяЛога = Неопределено) Экспорт
	Ошибка_(Сообщение, ЛогИлиИмяЛога);
КонецПроцедуры

Процедура Крит_(Сообщение, ЛогИлиИмяЛога = Неопределено) Экспорт
	КритическаяОшибка_(Сообщение, ЛогИлиИмяЛога);
КонецПроцедуры

#КонецОбласти

#Область ДлинныеВариантыЗаписи
Процедура Отладка_(Сообщение, ЛогИлиИмяЛога = Неопределено) Экспорт
	МодульлЛогСлужебный().ЗаписатьНовоеСообщениеВЛог(Сообщение, МодульлЛогСлужебный().УровниЛогирования().Отладка, ЛогИлиИмяЛога);
КонецПроцедуры

Процедура Информация_(Сообщение, ЛогИлиИмяЛога = Неопределено) Экспорт
	МодульлЛогСлужебный().ЗаписатьНовоеСообщениеВЛог(Сообщение, МодульлЛогСлужебный().УровниЛогирования().Информация, ЛогИлиИмяЛога);
КонецПроцедуры

Процедура Предупреждение_(Сообщение, ЛогИлиИмяЛога = Неопределено) Экспорт
	МодульлЛогСлужебный().ЗаписатьНовоеСообщениеВЛог(Сообщение, МодульлЛогСлужебный().УровниЛогирования().Предупреждение, ЛогИлиИмяЛога);
КонецПроцедуры

Процедура Ошибка_(Сообщение, ЛогИлиИмяЛога = Неопределено) Экспорт
	МодульлЛогСлужебный().ЗаписатьНовоеСообщениеВЛог(Сообщение, МодульлЛогСлужебный().УровниЛогирования().Ошибка, ЛогИлиИмяЛога);
КонецПроцедуры

Процедура КритическаяОшибка_(Сообщение, ЛогИлиИмяЛога = Неопределено) Экспорт
	МодульлЛогСлужебный().ЗаписатьНовоеСообщениеВЛог(Сообщение, МодульлЛогСлужебный().УровниЛогирования().КритическаяОшибка, ЛогИлиИмяЛога);
КонецПроцедуры

#КонецОбласти

#КонецОбласти

#Область ИнициализацияИНастройки

Функция НовыйЛог(ИмяЛога = "", Уровень = "") Экспорт
	Возврат МодульлЛогСлужебный().НовыйЛог(ИмяЛога, Уровень);
КонецФункции

Процедура Отключить(ЛогИлиИмяЛога = Неопределено) Экспорт
	МодульлЛогСлужебный().ОтключитьЛог(ЛогИлиИмяЛога);
КонецПроцедуры

Процедура Включить(ЛогИлиИмяЛога = Неопределено) Экспорт
	МодульлЛогСлужебный().ВключитьЛог(ЛогИлиИмяЛога);
КонецПроцедуры

Процедура ЗавершитьЛогирование(ЛогИлиИмяЛога = Неопределено) Экспорт
	МодульлЛогСлужебный().ЗавершитьЛогирование(ЛогИлиИмяЛога);
КонецПроцедуры

Процедура УстановитьУровеньЛогирования(Уровень, ЛогИлиИмяЛога = Неопределено) Экспорт
	МодульлЛогСлужебный().УстановитьУровеньЛогирования(Уровень, ЛогИлиИмяЛога);
КонецПроцедуры

Функция ЛогПоИмени(ИмяЛога = "") Экспорт
	Возврат МодульлЛогСлужебный().ТекущийЛог(ИмяЛога);
КонецФункции

Функция АктивныеЛоги() Экспорт
	Возврат МодульлЛогСлужебный().АктивныеЛоги();
КонецФункции

Процедура УстановитьШаблонСообщения(Шаблон, ЛогИлиИмяЛога = Неопределено) Экспорт
	МодульлЛогСлужебный().УстановитьШаблонСообщения(Шаблон, ЛогИлиИмяЛога);
КонецПроцедуры

#Если Клиент Тогда
	
Процедура ОбновитьЛогиНаКлиентеПоДаннымСервера() Экспорт
	МодульлЛогСлужебный().ОбновитьЛогиНаКлиентеПоДаннымСервера();
КонецПроцедуры
#КонецЕсли

#КонецОбласти

Функция ДанныеЛога(ЛогИлиИмяЛога = Неопределено) Экспорт
	Возврат МодульлЛогСлужебный().ДанныеЛога(ЛогИлиИмяЛога);
КонецФункции

Процедура ОчиститьСписокЛогов() Экспорт
	МодульлЛогСлужебный().ОчиститьСписокЛогов();
КонецПроцедуры

#Область СпособыЛогирования

Процедура ДобавитьСпособЛогированияКонсоль(ЛогИлиИмяЛога = Неопределено, Контекст = "") Экспорт
	ДобавитьСпособЛогирования("Консоль", Неопределено, ЛогИлиИмяЛога, Контекст);
КонецПроцедуры

Процедура ДобавитьСпособЛогированияБаза(ЛогИлиИмяЛога = Неопределено, Контекст = "") экспорт
	ДобавитьСпособЛогирования("База", Неопределено, ЛогИлиИмяЛога, Контекст);
КонецПроцедуры

Процедура ДобавитьСпособЛогированияЖурналРегистрации(ЛогИлиИмяЛога = Неопределено, Контекст = "") экспорт
	ДобавитьСпособЛогирования("ЖурналРегистрации", Неопределено, ЛогИлиИмяЛога, Контекст);
КонецПроцедуры

Процедура ДобавитьСпособЛогированияПамять(ЛогИлиИмяЛога = Неопределено, Контекст = "") экспорт
	ДобавитьСпособЛогирования("Память", Неопределено, ЛогИлиИмяЛога, Контекст);
КонецПроцедуры

Процедура ДобавитьСпособЛогированияФайл(ИмяФайла, ЛогИлиИмяЛога = Неопределено, Контекст = "") Экспорт
	ПараметрыЛогирования = ПараметрыСпособаЛогирования("Файл");
	ПараметрыЛогирования.ИмяФайла = ИмяФайла;
	ДобавитьСпособЛогирования("Файл", ПараметрыЛогирования, ЛогИлиИмяЛога, Контекст);
КонецПроцедуры

Процедура ДобавитьСпособЛогированияКаталогФайлов(Каталог, ШаблонИмениФайла = "", ЛогИлиИмяЛога = Неопределено, Контекст = "") Экспорт
	ПараметрыЛогирования = ПараметрыСпособаЛогирования("КаталогФайлов");
	ПараметрыЛогирования.Каталог = Каталог;
	
	Если ЗначениеЗаполнено(ШаблонИмениФайла) Тогда
		ПараметрыЛогирования.ШаблонИмениФайла = ШаблонИмениФайла;
	КонецЕсли;
	
	ДобавитьСпособЛогирования("КаталогФайлов", ПараметрыЛогирования, ЛогИлиИмяЛога, Контекст);
КонецПроцедуры

Процедура ДобавитьСпособЛогирования(Способ, Параметры, ЛогИлиИмяЛога = Неопределено, Контекст = "") Экспорт
	МодульлЛогСлужебный().ДобавитьСпособЛогирования(Способ, Параметры, ЛогИлиИмяЛога, Контекст);
КонецПроцедуры

Функция ПараметрыСпособаЛогирования(Способ) Экспорт
	Возврат МодульлЛогСлужебный().ПараметрыСпособаЛогирования(Способ);
КонецФункции

#КонецОбласти

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

#Область ПереопределениеМодулейПодсистемы

Функция МодульлЛогСлужебный()
	Возврат лЛогСлужебный;
КонецФункции

#КонецОбласти

#КонецОбласти
