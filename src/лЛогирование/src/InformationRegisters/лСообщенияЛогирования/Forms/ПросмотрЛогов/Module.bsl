#Область ОбработчикиСобытийФормы

&НаСервере
Процедура ПриСозданииНаСервере(Отказ, СтандартнаяОбработка)

	ЛимитЗаписей = 200;

	Период.ДатаНачала = НачалоДня(ТекущаяДатаСеанса());
	Период.ДатаОкончания = ТекущаяДатаСеанса();

	Для Каждого ИмяСобытия Из РазличныеПоляЗаписей("ИмяСобытия") Цикл
		ОтборИмяСобытия.Добавить(ИмяСобытия);
	КонецЦикла;

	Для Каждого КлючСеанса Из РазличныеПоляЗаписей("НомерСеанса") Цикл
		ОтборКлючСеанса.Добавить(КлючСеанса);
	КонецЦикла;

КонецПроцедуры

#КонецОбласти

#Область ОбработчикиСобытийЭлементовШапкиФормы

&НаКлиенте
Процедура ОтборИмяСобытияПометкаПриИзменении(Элемент)
	Если ОбновлятьСразу Тогда
		ОбновитьЛог();
	КонецЕсли;
КонецПроцедуры

&НаКлиенте
Процедура ОтборКлючСеансаПометкаПриИзменении(Элемент)
	Если ОбновлятьСразу Тогда
		ОбновитьЛог();
	КонецЕсли;
КонецПроцедуры

&НаКлиенте
Процедура ПериодПриИзменении(Элемент)
	Если ОбновлятьСразу Тогда
		ОбновитьЛог();
	КонецЕсли;
КонецПроцедуры

&НаКлиенте
Процедура ЛимитЗаписейПриИзменении(Элемент)
	Если ОбновлятьСразу Тогда
		ОбновитьЛог();
	КонецЕсли;
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиКомандФормы

&НаКлиенте
Процедура ОбновитьЛогКоманда(Команда)

	ОбновитьЛог();

КонецПроцедуры

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

&НаСервере
Функция РазличныеПоляЗаписей(ИмяПоля)

	РазличныеПоля = Новый Массив;

	Запрос = Новый Запрос;
	Запрос.Текст = "ВЫБРАТЬ РАЗЛИЧНЫЕ Записи." + ИмяПоля + " КАК Значение 
														   |ИЗ РегистрСведений.лСообщенияЛогирования КАК Записи";

	Выборка = Запрос.Выполнить().Выбрать();

	Пока Выборка.Следующий() Цикл
		РазличныеПоля.Добавить(Выборка.Значение);
	КонецЦикла;

	Возврат РазличныеПоля;

КонецФункции

&НаСервере
Процедура ОбновитьЛог()

	ПоляОтбора = Новый Структура;

	Для Каждого Эл Из ОтборИмяСобытия Цикл
		Если Эл.Пометка Тогда
			Если Не ПоляОтбора.Свойство("ИменаСобытия") Тогда
				ПоляОтбора.Вставить("ИменаСобытия", Новый Массив);
			КонецЕсли;
			ПоляОтбора.ИменаСобытия.Добавить(Эл.Значение);
		КонецЕсли;
	КонецЦикла;

	Для Каждого Эл Из ОтборКлючСеанса Цикл
		Если Эл.Пометка Тогда
			Если Не ПоляОтбора.Свойство("НомераСеанса") Тогда
				ПоляОтбора.Вставить("НомераСеанса", Новый Массив);
			КонецЕсли;
			ПоляОтбора.НомераСеанса.Добавить(Эл.Значение);
		КонецЕсли;
	КонецЦикла;

	Если ЗначениеЗаполнено(Период.ДатаНачала) Тогда
		ПоляОтбора.Вставить("ДатаНач", Период.ДатаНачала);
		ПоляОтбора.Вставить("ДатаКон", Период.ДатаОкончания);
	КонецЕсли;

	Если ЗначениеЗаполнено(ЛимитЗаписей) Тогда
		ПоляОтбора.Вставить("ЛимитЗаписей", ЛимитЗаписей);
	КонецЕсли;

	ДанныеПросмотра = ЛогИзБазы(ПоляОтбора);

КонецПроцедуры

&НаСервереБезКонтекста
Функция ЛогИзБазы(ПараметрыОтбора, ПоляИтогов = "ИмяСобытия, НомерСеанса", ПоляУпорядочивания = "ИмяСобытия, НомерСеанса, Дата") Экспорт
	
	Запрос = Новый Запрос;
	ТекстЗапроса = 
	"ВЫБРАТЬ ПЕРВЫЕ 1
	|	лСообщенияЛогирования.ИмяСобытия КАК ИмяСобытия,
	|	лСообщенияЛогирования.НомерСеанса КАК НомерСеанса,
	|	лСообщенияЛогирования.Дата КАК Дата,
	|	лСообщенияЛогирования.Идентификатор КАК Идентификатор,
	|	лСообщенияЛогирования.ТекстСообщения КАК ТекстСообщения,
	|	лСообщенияЛогирования.Уровень КАК Уровень
	|ИЗ
	|	РегистрСведений."+МодульлЛогСлужебный().ИмяРегистралСообщенияЛогирования()+" КАК лСообщенияЛогирования
	|ГДЕ
	|	ИСТИНА
	|	И лСообщенияЛогирования.ИмяСобытия В (&ИменаСобытия)
	|	И лСообщенияЛогирования.НомерСеанса В (&НомераСеанса)
	|	И лСообщенияЛогирования.Дата МЕЖДУ &ДатаНач И &ДатаКон";
	
	Если ТипЗнч(ПараметрыОтбора) = Тип("Структура") Тогда
		Если ПараметрыОтбора.Свойство("ИменаСобытия") Тогда
			Запрос.УстановитьПараметр("ИменаСобытия", ПараметрыОтбора.ИменаСобытия);
		Иначе
			ТекстЗапроса = СтрЗаменить(ТекстЗапроса, "И лСообщенияЛогирования.ИмяСобытия В (&ИменаСобытия)", "");
		КонецЕсли;
		Если ПараметрыОтбора.Свойство("НомераСеанса") Тогда
			Запрос.УстановитьПараметр("НомераСеанса", ПараметрыОтбора.НомераСеанса);
		Иначе
			ТекстЗапроса = СтрЗаменить(ТекстЗапроса, "И лСообщенияЛогирования.НомерСеанса В (&НомераСеанса)", "");
		КонецЕсли;
		Если ПараметрыОтбора.Свойство("ДатаНач") И ПараметрыОтбора.Свойство("ДатаКон") Тогда
			Запрос.УстановитьПараметр("ДатаНач", ПараметрыОтбора.ДатаНач);
			Запрос.УстановитьПараметр("ДатаКон", ПараметрыОтбора.ДатаКон);
		Иначе
			ТекстЗапроса = СтрЗаменить(ТекстЗапроса, "И лСообщенияЛогирования.Дата МЕЖДУ &ДатаНач И &ДатаКон", "");		
		КонецЕсли;	
		Если ПараметрыОтбора.Свойство("ЛимитЗаписей") Тогда
			ТекстЗапроса = СтрЗаменить(ТекстЗапроса, "ПЕРВЫЕ 1", "ПЕРВЫЕ " + Формат(ПараметрыОтбора.ЛимитЗаписей, "ЧГ=0;"));	
		Иначе
			ТекстЗапроса = СтрЗаменить(ТекстЗапроса, "ПЕРВЫЕ 1", "");
		КонецЕсли;
	Иначе
		ТекстЗапроса = СтрЗаменить(ТекстЗапроса, "И лСообщенияЛогирования.ИмяСобытия В (&ИменаСобытия)", "");
		ТекстЗапроса = СтрЗаменить(ТекстЗапроса, "И лСообщенияЛогирования.НомерСеанса В (&НомераСеанса)", "");
		ТекстЗапроса = СтрЗаменить(ТекстЗапроса, "И лСообщенияЛогирования.Дата МЕЖДУ &ДатаНач И &ДатаКон", "");		
		ТекстЗапроса = СтрЗаменить(ТекстЗапроса, "ПЕРВЫЕ 1", "");
	КонецЕсли;
		
	Если Не ПустаяСтрока(ПоляУпорядочивания) Тогда
		ТекстЗапроса = ТекстЗапроса + " УПОРЯДОЧИТЬ ПО " + ПоляУпорядочивания;
	КонецЕсли;
	Если НЕ ПустаяСтрока(ПоляИтогов) Тогда
		ТекстЗапроса = ТекстЗапроса + " ИТОГИ ПО " + ПоляИтогов;
	КонецЕсли;
	
	Запрос.Текст = ТекстЗапроса;
	
	Текст = Новый ТекстовыйДокумент;
	
	Если Не ЗначениеЗаполнено(ПоляИтогов) Тогда
		ЗаписиЛога = Запрос.Выполнить().Выгрузить();
	Иначе
		ЗаписиЛога = Запрос.Выполнить().Выгрузить(ОбходРезультатаЗапроса.ПоГруппировкам);
	КонецЕсли;
	
	ВывестиСтрокиРекурсивно(ЗаписиЛога.Строки, Текст, 0, СтрРазделить(ПоляИтогов, ",", Ложь));
	
	Возврат Текст.ПолучитьТекст();
	
КонецФункции

&НаСервереБезКонтекста
Процедура ВывестиСтрокиРекурсивно(Строки, Текст, Уровень, ПоляИтогов)
	
	Для Каждого Строка Из Строки Цикл
		Если ПоляИтогов.ВГраница() > Уровень Тогда
			Текст.ДобавитьСтроку(Отступы(Уровень) + Строка[ПоляИтогов[Уровень]]);
		Иначе
			Текст.ДобавитьСтроку(Отступы(Уровень) + Строка.ТекстСообщения);
		КонецЕсли;
		ВывестиСтрокиРекурсивно(Строка.Строки, Текст, Уровень + 1, ПоляИтогов);
		Текст.ДобавитьСтроку("");
	КонецЦикла;
	
КонецПроцедуры

&НаСервереБезКонтекста
Функция Отступы(Количество, СимволОтступа = "")
	
	Если ПустаяСтрока(СимволОтступа) Тогда
		СимволОтступа = Символы.Таб;
	КонецЕсли;
	
	СтрокаОтсупа = "";
	
	Для н = 1 По Количество Цикл
		СтрокаОтсупа = СтрокаОтсупа + СимволОтступа;
	КонецЦикла;
			
	Возврат СтрокаОтсупа;
	
КонецФункции


#Область ПереопределениеМодулейПодсистемы

&НаКлиентеНаСервереБезКонтекста
Функция МодульлЛогСлужебный()
	Возврат лЛогСлужебный;
КонецФункции

#КонецОбласти

#КонецОбласти