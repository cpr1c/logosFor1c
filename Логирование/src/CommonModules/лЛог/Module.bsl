
#Область ПрограммныйИнтерфейс

#Область ИнициализацияЛогирования

Функция ПараметрыЛогирования() Экспорт
	
	#Если Клиент Тогда
	// при первом обращении сохраняем настройки для использования на клиенте
	Если лПараметрыЛогирования = Неопределено Тогда
		ПолучитьТекущиеНастройкиССервера();
	КонецЕсли;
	#Иначе
	УстановитьПривилегированныйРежим(Истина);
	лПараметрыЛогирования = ПараметрыСеанса.лПараметрыЛогирования;
	#КонецЕсли
	
	Возврат лПараметрыЛогирования;
	
КонецФункции

Функция СообщенияЛогирования() Экспорт
	
	#Если Клиент Тогда
	// при первом обращении сохраняем настройки для использования на клиенте
	Если лСообщенияЛогирования = Неопределено Тогда
		лСообщенияЛогирования = Новый Массив;
	КонецЕсли;
	#Иначе
	УстановитьПривилегированныйРежим(Истина);
	лСообщенияЛогирования = ПараметрыСеанса.лСообщенияЛогирования;
	#КонецЕсли
	
	Возврат лСообщенияЛогирования;
	
КонецФункции

Процедура Инициализировать(ИспользоватьОсновную = Истина, НаименованиеНастройки = "") Экспорт
	
	лЛогированиеВызовСервераСлужебный.Инициализировать(ИспользоватьОсновную, НаименованиеНастройки);
	// требуется на клиенте, если заново инициализировали
	ПолучитьТекущиеНастройкиССервера();
	
КонецПроцедуры

Процедура УстановитьИмяСобытияЛогирования(ИмяСобытия) Экспорт
	
	лЛогированиеВызовСервераСлужебный.УстановитьИмяСобытияЛогирования(ИмяСобытия);
	ПолучитьТекущиеНастройкиССервера();
	
КонецПроцедуры

Процедура УстановитьУровеньЛогирования(УровеньЛогирования) Экспорт
			
	лЛогированиеВызовСервераСлужебный.УстановитьУровеньЛогирования(УровеньЛогирования);
	ПолучитьТекущиеНастройкиССервера();
	
КонецПроцедуры

Процедура ДобавитьСпособЛогирования(СпособЛогирования, ШаблонСообщения = "", ФорматДаты = "") Экспорт
	
	лЛогированиеВызовСервераСлужебный.ДобавитьСпособЛогирования(СпособЛогирования, ШаблонСообщения, ФорматДаты);
	ПолучитьТекущиеНастройкиССервера();
	
КонецПроцедуры

Процедура УстановитьПутьКФайлуЛогирования(ПутьКФайлу) Экспорт
	
	#Если Клиент Тогда
	ИмяНастройки = "ИмяФайлаЛогаНаКлиенте";
	#Иначе
	ИмяНастройки = "ИмяФайлаЛогаНаСервере";
	#КонецЕсли
	
	лЛогированиеВызовСервераСлужебный.УстановитьПутьКФайлуЛогирования(ПутьКФайлу, ИмяНастройки);
	
	ПолучитьТекущиеНастройкиССервера();
	
КонецПроцедуры

Процедура ОтключитьЛогирование() Экспорт
	
	лЛогированиеВызовСервераСлужебный.ОтключитьЛогирование();
	ПолучитьТекущиеНастройкиССервера();
	
КонецПроцедуры

Процедура ВключитьЛогирование() Экспорт
	
	лЛогированиеВызовСервераСлужебный.ВключитьЛогирование();
	ПолучитьТекущиеНастройкиССервера();
	
КонецПроцедуры

Процедура ЗавершитьЛогирование() Экспорт
	
	#Если Клиент Тогда
	лПараметрыЛогирования = Неопределено;
	лСообщенияЛогирования = Неопределено;
	#КонецЕсли
	
	лЛогированиеВызовСервераСлужебный.ЗавершитьЛогирование();
	
КонецПроцедуры

#КонецОбласти

#Область ОсновныеМетоды

Процедура Отладка_(Сообщение, ИмяСобытия = "") Экспорт
	
	ДопПараметры = Новый Структура;
	ДопПараметры.Вставить("УровеньЛогирования", ПредопределенноеЗначение("Перечисление.лУровниЛогирования.ОТЛАДКА"));
	
	Если ЗначениеЗаполнено(ИмяСобытия) Тогда
		ДопПараметры.Вставить("ИмяСобытия", ИмяСобытия);
	КонецЕсли;
	
	лЛогированиеКлиентСерверСлужебный.ЗаписатьВЛог(Сообщение, ДопПараметры);
	
КонецПроцедуры

Процедура Информация_(Сообщение, ИмяСобытия = "") Экспорт
	
	ДопПараметры = Новый Структура;
	ДопПараметры.Вставить("УровеньЛогирования", ПредопределенноеЗначение("Перечисление.лУровниЛогирования.ИНФОРМАЦИЯ"));
	
	Если ЗначениеЗаполнено(ИмяСобытия) Тогда
		ДопПараметры.Вставить("ИмяСобытия", ИмяСобытия);
	КонецЕсли;
	
	лЛогированиеКлиентСерверСлужебный.ЗаписатьВЛог(Сообщение, ДопПараметры);
	
КонецПроцедуры

Процедура Предупреждение_(Сообщение, ИмяСобытия = "") Экспорт
	
	ДопПараметры = Новый Структура;
	ДопПараметры.Вставить("УровеньЛогирования", ПредопределенноеЗначение("Перечисление.лУровниЛогирования.ПРЕДУПРЕЖДЕНИЕ"));
	
	Если ЗначениеЗаполнено(ИмяСобытия) Тогда
		ДопПараметры.Вставить("ИмяСобытия", ИмяСобытия);
	КонецЕсли;
	
	лЛогированиеКлиентСерверСлужебный.ЗаписатьВЛог(Сообщение, ДопПараметры);
	
КонецПроцедуры

Процедура Ошибка_(Сообщение, ИмяСобытия = "") Экспорт
	
	ДопПараметры = Новый Структура;
	ДопПараметры.Вставить("УровеньЛогирования", ПредопределенноеЗначение("Перечисление.лУровниЛогирования.ОШИБКА"));
	
	Если ЗначениеЗаполнено(ИмяСобытия) Тогда
		ДопПараметры.Вставить("ИмяСобытия", ИмяСобытия);
	КонецЕсли;
	
	лЛогированиеКлиентСерверСлужебный.ЗаписатьВЛог(Сообщение, ДопПараметры);
	
КонецПроцедуры

#КонецОбласти

#Область ВспомогательныеМетоды

Функция ПредставлениеЗначения(Значение) Экспорт
	
	Попытка
		Запись = Новый ЗаписьJSON;
		Запись.УстановитьСтроку();
		ЗаписатьJSON(Запись, Значение, , "ОбработчикЗаписиЗначенийJSON", лЛог);
		ТекстПредставления = Запись.Закрыть();
	Исключение
		лЛог.Ошибка_(СтрШаблон("Не удалось записать JSON-представление значения <%1> по причине %2", Значение, ПодробноеПредставлениеОшибки(ИнформацияОбОшибке())));
		ТекстПредставления = Строка(Значение);
	КонецПопытки;
	
	Возврат ТекстПредставления;
	
КонецФункции

Функция ОбработчикЗаписиЗначенийJSON(Свойство, Значение, ДополнительныеПараметры, Отказ) Экспорт
	
	Если ТипЗнч(Значение) = Тип("NULL") Тогда
		Значение = "NULL";
	ИначеЕсли ТипЗнч(Значение) = Тип("Неопределено") Тогда
		Значение = "Неопределено";
	ИначеЕсли ТипЗнч(Значение) = Тип("УникальныйИдентификатор") Тогда
		Значение = "UID:" + Значение;
	Иначе
		Значение = СокрЛП(Значение);
	КонецЕсли;
	
	Возврат Значение;
	
КонецФункции

#КонецОбласти

#Область ДанныеЛога

Функция ЛогИзПамяти(Очищать = Ложь) Экспорт
	
	ТекстЛога = Новый ТекстовыйДокумент;
	
	лСообщенияЛогирования = СообщенияЛогирования();
	
	Для Каждого ЗаписьЛога Из лСообщенияЛогирования Цикл
		ТекстЛога.ДобавитьСтроку(ЗаписьЛога);
	КонецЦикла;
	
	Если Очищать Тогда
		#Если Клиент Тогда
		лСообщенияЛогирования.Очистить();
		#Иначе
		УстановитьПривилегированныйРежим(Истина);
		ПараметрыСеанса.лСообщенияЛогирования = Новый ФиксированныйМассив(Новый Массив);
		#КонецЕсли
	КонецЕсли;
	
	Возврат ТекстЛога.ПолучитьТекст();
	
КонецФункции

Функция ЛогИзБазы(ПараметрыОтбора = Неопределено, ПоляИтогов = "ИмяСобытия, КлючСеанса", ПоляУпорядочивания = "ИмяСобытия, КлючСеанса, Дата") Экспорт
	
	ТекстЛога = лЛогированиеВызовСервераСлужебный.ЛогИзБазы(ПараметрыОтбора, ПоляИтогов, ПоляУпорядочивания);
	Возврат ТекстЛога.ПолучитьТекст();
	
КонецФункции

#КонецОбласти

#Область ЗначенияПоУмолчанию

Функция ШаблонСообщенияПоУмолчанию() Экспорт
	Возврат "%ДАТА% - %СОБЫТИЕ% - %УРОВЕНЬ% - %СООБЩЕНИЕ%";
КонецФункции

Функция ФорматДатыПоУмолчанию() Экспорт
	Возврат "ДФ='yyyy.MM.dd HH-mm-ss'";
КонецФункции

#КонецОбласти

#КонецОбласти

#Область СлужебныеФункцииИПроцедуры

// Получает текущие настройки логирования с сервера (из параметра сеанса).
// Нужно после изменения настроек логирования на сервере для синхронизации с ними клиентских настроек
//
Процедура ПолучитьТекущиеНастройкиССервера()
	
	#Если Клиент Тогда
	лПараметрыЛогирования = лЛогированиеВызовСервераСлужебный.ТекущиеНастройкиЛогирования();
	#КонецЕсли
	
КонецПроцедуры

#КонецОбласти