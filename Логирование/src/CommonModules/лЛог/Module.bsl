
#Область ПрограммныйИнтерфейс

#Область ИнициализацияЛогирования

Функция ПараметрыЛогирования() 
	
	#Если Клиент Тогда
	// при первом обращении сохраняем настройки для использования на клиенте
	Если лПараметрыЛогирования = Неопределено Тогда
		ПолучитьТекущиеНастройкиССервера();
	КонецЕсли;
	#Иначе
	лПараметрыЛогирования = ПараметрыСеанса.лПараметрыЛогирования;
	#КонецЕсли
	
	Возврат лПараметрыЛогирования;
	
КонецФункции

Функция СообщенияЛогирования() 
	
	#Если Клиент Тогда
	// при первом обращении сохраняем настройки для использования на клиенте
	Если лСообщенияЛогирования = Неопределено Тогда
		лСообщенияЛогирования = Новый Массив;
	КонецЕсли;
	#Иначе
	лСообщенияЛогирования = ПараметрыСеанса.лСообщенияЛогирования;
	#КонецЕсли
	
	Возврат лСообщенияЛогирования;
	
КонецФункции

Процедура Инициализировать(ИспользоватьОсновную = Истина, НаименованиеНастройки = "") Экспорт
	
	лЛогирование.Инициализировать(ИспользоватьОсновную, НаименованиеНастройки);
	// требуется на клиенте, если заново инициализировали
	ПолучитьТекущиеНастройкиССервера();
	
КонецПроцедуры

Процедура ПолучитьТекущиеНастройкиССервера()
	
	#Если Клиент Тогда
	лПараметрыЛогирования = лЛогирование.ТекущиеНастройкиЛогирования();
	#КонецЕсли
	
КонецПроцедуры

Процедура УстановитьИмяСобытияЛогирования(ИмяСобытия) Экспорт
	
	лЛогирование.УстановитьИмяСобытияЛогирования(ИмяСобытия);
	ПолучитьТекущиеНастройкиССервера();
	
КонецПроцедуры

Процедура УстановитьУровеньЛогирования(УровеньЛогирования) Экспорт
			
	лЛогирование.УстановитьУровеньЛогирования(УровеньЛогирования);
	ПолучитьТекущиеНастройкиССервера();
	
КонецПроцедуры

Процедура ДобавитьСпособЛогирования(СпособЛогирования, ШаблонСообщения = "", ФорматДаты = "") Экспорт
	
	лЛогирование.ДобавитьСпособЛогирования(СпособЛогирования, ШаблонСообщения, ФорматДаты);
	ПолучитьТекущиеНастройкиССервера();
	
КонецПроцедуры

Процедура УстановитьПутьКФайлуЛогирования(ПутьКФайлу) Экспорт
	
	#Если Клиент Тогда
	ИмяНастройки = "ИмяФайлаЛогаНаКлиенте";
	#Иначе
	ИмяНастройки = "ИмяФайлаЛогаНаСервере";
	#КонецЕсли
	
	лЛогирование.УстановитьПутьКФайлуЛогирования(ПутьКФайлу, ИмяНастройки);
	
	ПолучитьТекущиеНастройкиССервера();
	
КонецПроцедуры

Процедура ОтключитьЛогирование() Экспорт
	
	лЛогирование.ОтключитьЛогирование();
	ПолучитьТекущиеНастройкиССервера();
	
КонецПроцедуры

Процедура ВключитьЛогирование() Экспорт
	
	лЛогирование.ВключитьЛогирование();
	ПолучитьТекущиеНастройкиССервера();
	
КонецПроцедуры

Процедура ЗавершитьЛогирование() Экспорт
	
	#Если Клиент Тогда
	лПараметрыЛогирования = Неопределено;
	лСообщенияЛогирования = Неопределено;
	#КонецЕсли
	
	лЛогирование.ЗавершитьЛогирование();
	
КонецПроцедуры

#КонецОбласти

#Область ОсновныеМетоды

Процедура Отладка_(Сообщение, ИмяСобытия = "") Экспорт
	
	ДопПараметры = Новый Структура;
	ДопПараметры.Вставить("УровеньЛогирования", ПредопределенноеЗначение("Перечисление.лУровниЛогирования.ОТЛАДКА"));
	
	Если ЗначениеЗаполнено(ИмяСобытия) Тогда
		ДопПараметры.Вставить("ИмяСобытия", ИмяСобытия);
	КонецЕсли;
	
	ЗаписатьВЛог(Сообщение, ДопПараметры);
	
КонецПроцедуры

Процедура Информация_(Сообщение, ИмяСобытия = "") Экспорт
	
	ДопПараметры = Новый Структура;
	ДопПараметры.Вставить("УровеньЛогирования", ПредопределенноеЗначение("Перечисление.лУровниЛогирования.ИНФОРМАЦИЯ"));
	
	Если ЗначениеЗаполнено(ИмяСобытия) Тогда
		ДопПараметры.Вставить("ИмяСобытия", ИмяСобытия);
	КонецЕсли;
	
	ЗаписатьВЛог(Сообщение, ДопПараметры);
	
КонецПроцедуры

Процедура Предупреждение_(Сообщение, ИмяСобытия = "") Экспорт
	
	ДопПараметры = Новый Структура;
	ДопПараметры.Вставить("УровеньЛогирования", ПредопределенноеЗначение("Перечисление.лУровниЛогирования.ПРЕДУПРЕЖДЕНИЕ"));
	
	Если ЗначениеЗаполнено(ИмяСобытия) Тогда
		ДопПараметры.Вставить("ИмяСобытия", ИмяСобытия);
	КонецЕсли;
	
	ЗаписатьВЛог(Сообщение, ДопПараметры);
	
КонецПроцедуры

Процедура Ошибка_(Сообщение, ИмяСобытия = "") Экспорт
	
	ДопПараметры = Новый Структура;
	ДопПараметры.Вставить("УровеньЛогирования", ПредопределенноеЗначение("Перечисление.лУровниЛогирования.ОШИБКА"));
	
	Если ЗначениеЗаполнено(ИмяСобытия) Тогда
		ДопПараметры.Вставить("ИмяСобытия", ИмяСобытия);
	КонецЕсли;
	
	ЗаписатьВЛог(Сообщение, ДопПараметры);
	
КонецПроцедуры

#КонецОбласти

#Область ЗаписьВЛог

Процедура ЗаписатьВЛог(Сообщение, ДопПараметры)
	
	лПараметрыЛогирования = ПараметрыЛогирования();
	
	Если лПараметрыЛогирования.Отключен Тогда
		Возврат;
	КонецЕсли;
	
	// Пропускаем вывод сообщения, если установлен уровень логирования больше уровня текущего метода логирования.
	Приоритет = лПараметрыЛогирования.ПриоритетУровняЛогирования;

	Если Приоритет > ПриоритетУровняЛогирования(ДопПараметры.УровеньЛогирования) Тогда
		Возврат;
	КонецЕсли;
		
	Для Каждого СпособЛогирования Из лПараметрыЛогирования.СпособыЛогирования Цикл
		
		ДопПараметры.Вставить("СпособЛогирования", СпособЛогирования.Ключ);
		ДопПараметры.Вставить("ОписаниеСпособаЛогирования", СпособЛогирования.Значение);
		
		Если СпособЛогирования.Ключ = ПредопределенноеЗначение("Перечисление.лСпособыЛогирования.База") Тогда
			лЛогирование.ДобавитьЗаписьВРегистр(Сообщение, ДопПараметры);
		ИначеЕсли СпособЛогирования.Ключ = ПредопределенноеЗначение("Перечисление.лСпособыЛогирования.ЖурналРегистрации") Тогда
			лЛогирование.ДобавитьЗаписьВЖурналРегистрации(Сообщение, ДопПараметры);
		ИначеЕсли СпособЛогирования.Ключ = ПредопределенноеЗначение("Перечисление.лСпособыЛогирования.Консоль") Тогда
			ДобавитьЗаписьВКонсоль(Сообщение, ДопПараметры);		
		ИначеЕсли СпособЛогирования.Ключ = ПредопределенноеЗначение("Перечисление.лСпособыЛогирования.Память") Тогда
			ДобавитьЗаписьВПамять(Сообщение, ДопПараметры);
		ИначеЕсли СпособЛогирования.Ключ = ПредопределенноеЗначение("Перечисление.лСпособыЛогирования.Файл") Тогда
			ДобавитьЗаписьВФайл(Сообщение, ДопПараметры);
		КонецЕсли;
		
	КонецЦикла;
	
КонецПроцедуры

Функция СтрокаСообщенияЛога(Сообщение, ДопПараметры) Экспорт
	
	// Способ определения миллисекунд не точный, могут быть коллизии на границах перехода между секундами,
	// в дате сообщения может оказаться одна секунда (например 54), а в универсальной дате следующая (например, 55).
	// Для более точного определения миллисекунд необходимо дату целиком извлекать из универсальной даты в мс.
	ДатаСообщения                = ТекущаяДата();
	ДатаСообщенияУниверсальнаяМС = ТекущаяУниверсальнаяДатаВМиллисекундах();
	ДатаМиллисекунды             = ДатаСообщенияУниверсальнаяМС % 1000; 
	ДатаПредставление            = Формат(ДатаСообщения, ДопПараметры.ОписаниеСпособаЛогирования.ФорматДаты);	
	ДатаПредставлениеМС          = Формат(ДатаМиллисекунды, "ЧЦ=3; ЧДЦ=0; ЧВН=; ЧГ=");
	
	лПараметрыЛогирования = ПараметрыЛогирования();
	
	Если ДопПараметры.Свойство("ИмяСобытия") Тогда
		ИмяСобытия = ДопПараметры.ИмяСобытия;
	Иначе
		ИмяСобытия = лПараметрыЛогирования.ИмяСобытия;
	КонецЕсли;
	
	СтрокаСообщения = ДопПараметры.ОписаниеСпособаЛогирования.ШаблонСообщения;
	СтрокаСообщения = СтрЗаменить(СтрокаСообщения, "%ДАТА%",                 ДатаПредставление);
	СтрокаСообщения = СтрЗаменить(СтрокаСообщения, "%ДАТАМС%",               ДатаПредставлениеМС);
	СтрокаСообщения = СтрЗаменить(СтрокаСообщения, "%УНИВЕРСАЛЬНАЯДАТАМС%",  Формат(ДатаСообщенияУниверсальнаяМС, "ЧГ="));
	СтрокаСообщения = СтрЗаменить(СтрокаСообщения, "%УРОВЕНЬ%",              Врег(ДопПараметры.УровеньЛогирования));
	СтрокаСообщения = СтрЗаменить(СтрокаСообщения, "%СООБЩЕНИЕ%",            Сообщение);
	СтрокаСообщения = СтрЗаменить(СтрокаСообщения, "%СОБЫТИЕ%",              ИмяСобытия);
		
	Возврат СтрокаСообщения;
	
КонецФункции

Процедура ДобавитьЗаписьВФайл(Сообщение, ДопПараметры)
	
	лПараметрыЛогирования = ПараметрыЛогирования();
	
	Текст = СтрокаСообщенияЛога(Сообщение, ДопПараметры);
	
	// файл может быть по какой-то причине недоступен, делаем через попытку, чтобы не падало
	#Если Клиент Тогда
	ИмяФайлаЛога = лПараметрыЛогирования.ИмяФайлаЛогаНаКлиенте;
	#Иначе
	ИмяФайлаЛога = лПараметрыЛогирования.ИмяФайлаЛогаНаСервере;
	#КонецЕсли
	
	Попытка
		ФайлЛога = Новый ЗаписьТекста(ИмяФайлаЛога,,,Истина);
		ФайлЛога.ЗаписатьСтроку(Текст);
		//ФайлЛога.Закрыть();
	Исключение
		Если ДопПараметры.Свойство("ИмяСобытия") Тогда
			ИмяСобытия = ДопПараметры.ИмяСобытия;
		Иначе
			ИмяСобытия = лПараметрыЛогирования.ИмяСобытия;
		КонецЕсли;
		лЛогирование.ЗаписатьОшибкуЛогированияВЖурналРегистрации(ИмяСобытия, ПодробноеПредставлениеОшибки(ИнформацияОбОшибке()));
	КонецПопытки;
	
КонецПроцедуры

Процедура ДобавитьЗаписьВКонсоль(Сообщение, ДопПараметры)
	
	лПараметрыЛогирования = ПараметрыЛогирования();
	
	Текст = СтрокаСообщенияЛога(Сообщение, ДопПараметры);
	
	Консоль = Новый СообщениеПользователю;
	Консоль.Текст = Текст;
	Консоль.Сообщить();
	
КонецПроцедуры

Процедура ДобавитьЗаписьВПамять(Сообщение, ДопПараметры)
	
	лСообщенияЛогирования = СообщенияЛогирования();
	
	Текст = СтрокаСообщенияЛога(Сообщение, ДопПараметры);
	
	Попытка
		#Если Клиент Тогда
		лСообщенияЛогирования.Добавить(Текст);
		#Иначе
		МассивСообщений = Новый Массив(лСообщенияЛогирования);
		МассивСообщений.Добавить(Текст);
		ПараметрыСеанса.лСообщенияЛогирования = Новый ФиксированныйМассив(МассивСообщений);
		#КонецЕсли
	Исключение
	КонецПопытки;
	
КонецПроцедуры

#КонецОбласти

#Область ДанныеЛога

Функция ЛогИзПамяти(Очищать = Ложь) Экспорт
	
	ТекстЛога = Новый ТекстовыйДокумент;
	
	лСообщенияЛогирования = СообщенияЛогирования();
	
	Для Каждого ЗаписьЛога Из лСообщенияЛогирования Цикл
		ТекстЛога.ДобавитьСтроку(ЗаписьЛога);
	КонецЦикла;
	
	Если Очищать Тогда
		#Если Клиент Тогда
		лСообщенияЛогирования.Очистить();
		#Иначе
		ПараметрыСеанса.лСообщенияЛогирования = Новый ФиксированныйМассив(Новый Массив);
		#КонецЕсли
	КонецЕсли;
	
	Возврат ТекстЛога.ПолучитьТекст();
	
КонецФункции

#КонецОбласти

#Область СлужебныеФункцииИПроцедуры

// Возвращает соответствие уровней логирования и их приоритет: [Уроверь => Приоритет].
Функция ВсеУровниЛогирования() 
	
	Уровни = Новый Соответствие;
	Уровни.Вставить(ПредопределенноеЗначение("Перечисление.лУровниЛогирования.ОТЛАДКА"),        0);
	Уровни.Вставить(ПредопределенноеЗначение("Перечисление.лУровниЛогирования.ИНФОРМАЦИЯ"),     1);
	Уровни.Вставить(ПредопределенноеЗначение("Перечисление.лУровниЛогирования.ПРЕДУПРЕЖДЕНИЕ"), 2);
	Уровни.Вставить(ПредопределенноеЗначение("Перечисление.лУровниЛогирования.ОШИБКА"),         3);
	
	Возврат Уровни;
	
КонецФункции

// Возвращает числовой приоритет переданного уровня логирования.
// Параметры
//     Уровень - Строка - имя уровеня лога.
// 
// Возвращаемое значение:
//     Число - числовой приоритет переданного уровня, если такой уровень неизвестен, будет возвращено -1 (наименьший приоритет).
Функция ПриоритетУровняЛогирования(Уровень) Экспорт
	
	Приоритет = ВсеУровниЛогирования().Получить(Уровень);
	Если Приоритет = Неопределено Тогда
		Возврат -1;
	КонецЕсли;
	
	Возврат Приоритет;
	
КонецФункции

Функция ШаблонСообщенияПоУмолчанию() Экспорт
	Возврат "%ДАТА% - %УРОВЕНЬ% - %СООБЩЕНИЕ%";
КонецФункции

Функция ФорматДатыПоУмолчанию() Экспорт
	Возврат "ДФ='yyyy.MM.dd HH-mm-ss'";
КонецФункции

#КонецОбласти

#КонецОбласти
